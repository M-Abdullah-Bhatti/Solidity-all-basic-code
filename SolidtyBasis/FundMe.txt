// Get funds from user
// Withdraw funds
// Set a minimum funding value is USD

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./PriceConverter.sol";

// to make gas efficient we use constant and immutable
// immutable is used for the variable which are used in constructor

error NotOwner();

contract FundMe {

    using PriceConverter for uint256;

    uint256 public constant MINIMUM_USD = 50 * 1e18;
    address[] public funders;
    mapping(address => uint256) public addressToAmountFunded;

    // this tells that only owner can do:
    address public immutable i_owner;
   constructor(){
       i_owner = msg.sender;
   }

    function fund() public payable{
    // we want to able to set a minimum funding value is USD
    // 1. How do we sen eth to this contract?
    require(msg.value.getConversionRate() >= 1e18, "not enough"); //1e18 = 1 * 10 ** 18
    funders.push(msg.sender);
    addressToAmountFunded[msg.sender] = msg.value;
    }


    function Withdraw() public onlyOwner{
        for(uint256 funderIndex; funderIndex < funders.length; funderIndex++){
            address funder = funders[funderIndex];
            addressToAmountFunded[funder] = 0;
        }
        // reset the array:
        funders = new address[](0);
        // to withdraw payment
        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
         require(callSuccess, "send fail");

    }


    modifier onlyOwner {
        //  require(msg.sender == i_owner, "sender is ot owner!");
        // in order to store gas:
        if(msg.sender != i_owner){ revert NotOwner();}
        _;
    }

    receive() external payable{
        fund();
    }

    fallback() external payable{
        fund();
    }

    // What happen if someone send this contract ETH without calling fund function:
    // 1. recieve
    // 2. fallback


    // we can send native bcc currency in 3 ways:
    // 1. tranfer:
    // payable(msg.sender).tranfer(address(this).balance);
    // msg.sender = address
    // payable(msg.sender) = payable address

    // 2. send
    //  bool sendSuccess = payable(msg.sender).send(address(this).balance);
    // require(sendSuccess, "send fail");

    // 3. call
    // (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}("");
    // require(sendSuccess, "send fail");



}